{"version":3,"sources":["components/Card/index.js","components/Wrapper/index.js","App.js","index.js"],"names":["Card","props","image","clickCard","sectionStyle","backgroundPosition","backgroundSize","backgroundRepeat","backgroundImage","concat","react_default","a","createElement","className","onClick","e","id","style","Wrapper","children","INITIAL_STATE","options","guessed","score","highScore","App","state","shuffleCards","_this","sort","Math","random","handleCard","preventDefault","_this$state","runStateUpdate","i","selected","resetGame","console","log","setState","setTimeout","_this2","this","cardOptions","map","option","components_Card","Object","assign","key","components_Wrapper","length","React","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.3383e4c9.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Card(props) {\n\n  const {\n    image,\n    clickCard\n  } = props;\n\n  var sectionStyle = {\n    backgroundPosition: \"center\",\n    backgroundSize: \"contain\",\n    backgroundRepeat: \"no-repeat\",\n    backgroundImage: `url(${image})`\n  };\n\n  return (\n    <div className=\"card\" onClick={e => clickCard( e, props.id )} style={ sectionStyle }>\n      {/* selected ? \"SELECTED\" : \"\" */}\n    </div>\n  );\n}\n\nexport default Card;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport options from \"./options.json\";\nimport \"./App.css\";\n\nconst INITIAL_STATE = {\n  options,\n  guessed: null,\n  score: 0,\n  highScore: 0 \n}\n\nclass App extends React.Component {\n\n  state = { ...INITIAL_STATE };\n\n  shuffleCards = () => {\n    return this.state.options.sort(() => Math.random() - 0.5);\n  }\n\n  /*\n    onClick event that will check whether the card\n    was clicked already\n  */\n\n  handleCard = (e,id) => {\n    \n    e.preventDefault();\n\n    let {\n      options,\n      score,\n      highScore,\n      guessed\n    } = this.state;\n\n    let runStateUpdate = true; // run setState or not\n\n    // shuffle order\n    options = this.shuffleCards();\n\n    for (var i in options) {\n      \n      // find clicked item in the array\n      if (options[i].id === id) {\n        \n        // if it's already selected\n        if(options[i].selected){\n          \n          score = 0;              // reset score\n          guessed = false;        // initiate shake animations\n          this.resetGame();       // reset all selected cards\n          runStateUpdate = false; // don't update the state here since reset will set\n          break;                  // stop the loop\n        \n        // update score and select\n        } else {\n        \n          score++;                // score up\n\n          if(score > highScore){  // check high score\n            highScore = score;    // update high score\n          }\n\n          guessed = true;         \n          options[i].selected = true;\n\n        }\n        break; //Stop this loop, we found it!\n      }\n    }\n    \n    if(runStateUpdate){\n      console.log(\"state updated\");\n      this.setState({ options, score, highScore, guessed });\n      setTimeout(() => {\n        this.setState({guessed: null});\n      }, 3500)\n    }\n   \n  }\n\n  resetGame = () => {\n\n    console.log(\"state resets\");\n    \n    //To do: reset using initial_state\n    //this.setState(INITIAL_STATE);\n    \n    for (var i in options) {\n      options[i].selected = false;\n    }\n\n    this.setState({ \n      options,\n      score: 0,\n      guessed: false,\n    });\n\n    setTimeout(() => {\n      this.setState({ guessed: null });\n    }, 3500)\n    \n  }\n\n  render(){\n\n    const { options } = this.state;\n\n    const cardOptions = options.map(option => (\n      <Card {...option} clickCard={this.handleCard} key={option.id} />\n    ));\n\n    return (\n\n      <Wrapper>\n          <h1 className=\"title\">Clicky Game</h1>\n          <p className=\"instructions\">\n            Click on an Image to Earn Points, \n            but don't click on the same image twice!\n          </p>\n          <p>\n              Score: <strong>{this.state.score} of {this.state.options.length}</strong> \n              &nbsp; | &nbsp; \n              Highest Score: <strong>{this.state.highScore}</strong>\n          </p>\n          {this.state.score === this.state.options.length ? (\n            <div className=\"win-message\">\n              <h3>You won!!!</h3>\n              <button \n                className=\"restartGame\" \n                onClick={this.resetGame}>\n                  Restart Game\n              </button>  \n            </div>) : \"\"} \n          <p>\n            <span \n              className={this.state.guessed !== null ?\n               (this.state.guessed ? \n                \"guesses correct show\" :  // true\n                \"guesses hide\" ) :        // false\n                \"guesses hide\"}           // false\n            >  \n                  You guessed correctly!\n            </span>\n            <span \n              className={this.state.guessed !== null ? \n                (this.state.guessed ?\n                  \"guesses hide\" :              // true\n                  \"guesses incorrect show\" ) :  // false\n                  \"guesses hide\"}               // false\n            >\n              You guessed incorrectly!\n            </span>\n          </p>\n          <div \n            className={this.state.guessed !== null ? \n              (this.state.guessed ? \n                \"wrapper-content\" :           // true\n                \"shake wrapper-content\" ) :   // false\n                \"wrapper-content\"}            // false\n          >  \n            {cardOptions}\n          </div>\n      </Wrapper>\n      \n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}