{"version":3,"sources":["components/Card/index.js","components/Wrapper/index.js","App.js","index.js"],"names":["Card","props","image","clickCard","sectionStyle","backgroundPosition","backgroundSize","backgroundRepeat","backgroundImage","concat","react_default","a","createElement","className","onClick","id","style","Wrapper","children","INITIAL_STATE","options","guessed","score","highScore","App","state","handleCard","_this$state","_this","sort","Math","random","runStateUpdate","i","selected","resetGame","console","log","setState","setTimeout","_this2","this","cardOptions","map","option","components_Card","Object","assign","key","components_Wrapper","length","React","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.211e9cbe.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Card(props) {\n\n  const {\n    image,\n    clickCard\n  } = props;\n\n  var sectionStyle = {\n    backgroundPosition: \"center\",\n    backgroundSize: \"contain\",\n    backgroundRepeat: \"no-repeat\",\n    backgroundImage: `url(${image})`\n  };\n\n  return (\n    <div className=\"card\" onClick={() => clickCard(props.id)} style={ sectionStyle }>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport options from \"./options.json\";\nimport \"./App.css\";\n\nconst INITIAL_STATE = {\n  options,\n  guessed: null,\n  score: 0,\n  highScore: 0 \n}\n\nclass App extends React.Component {\n\n  state = { ...INITIAL_STATE };\n\n  handleCard = id => {\n  \n    let {\n      options,\n      score,\n      highScore,\n      guessed\n    } = this.state;\n\n    // shuffle order\n    options = options.sort(() => Math.random() - 0.5);\n    let runStateUpdate = true;\n\n    for (var i in options) {\n      \n      // find clicked item in the array\n      if (options[i].id === id) {\n        \n        // check whether it's already selected\n        if(options[i].selected){\n          \n          score = 0;\n          guessed = false;\n          this.resetGame();\n          runStateUpdate = false;\n          break; //stop the loop\n        \n        // update score and select\n        } else {\n        \n          score++; // score up\n\n          // check high score\n          if(score > highScore){\n            highScore = score;\n          }\n\n          guessed = true;\n          options[i].selected = true;\n\n        }\n        break; //Stop this loop, we found it!\n      }\n    }\n    \n    if(runStateUpdate){\n      console.log(\"state updated\");\n      this.setState({ options, score, highScore, guessed });\n      setTimeout(() => {\n        this.setState({guessed: null});\n      }, 3500)\n    }\n   \n  }\n\n  resetGame = () => {\n\n    console.log(\"state resets\");\n    \n    //To do: reset using initial_state\n    //this.setState(INITIAL_STATE);\n\n    for (var i in options) {\n      options[i].selected = false;\n    }\n\n    this.setState({ \n      options,\n      score: 0,\n      guessed: false,\n    })\n\n    setTimeout(() => {\n      this.setState({ guessed: null });\n    }, 3500)\n    \n  }\n\n  render(){\n\n    const { options } = this.state;\n\n    const cardOptions = options.map(option => (\n      <Card {...option} clickCard={this.handleCard} key={option.id} />\n    ));\n\n    return (\n\n      <Wrapper>\n          <h1 className=\"title\">Clicky Game</h1>\n          <p className=\"instructions\">Click on an Image to Earn Points, but don't click on the same image twice!</p>\n          <p>\n              Score: <strong>{this.state.score} of {this.state.options.length}</strong> \n              &nbsp; | &nbsp; \n              Highest Score: <strong>{this.state.highScore}</strong>\n          </p>\n          {this.state.score === this.state.options.length ? (\n            <div>\n              <h3>You won!!!</h3>\n              <button onClick={this.resetGame}>Restart Game</button>  \n            </div>) : \"\"}\n          <p>\n            <span className={this.state.guessed !== null ? (this.state.guessed ? \"guesses correct show\" : \"guesses hide\" ) : \"guesses hide\"}>You guessed correctly!</span>\n            <span className={this.state.guessed !== null ? (this.state.guessed ? \"guesses hide\" : \"guesses incorrect show\" ) : \"guesses hide\"}>You guessed incorrectly!</span>\n          </p>\n          <div className={this.state.guessed !== null ? (this.state.guessed ? \"wrapper-content\" : \"shake wrapper-content\" ) : \"wrapper-content\"}>  \n            {cardOptions}\n          </div>\n      </Wrapper>\n      \n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}